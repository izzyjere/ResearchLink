@page "/"
@using System.Text;
@using System.Text.RegularExpressions;
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <EditForm Model="@searchModel" OnValidSubmit="SearchAsync">
                <div class="input-group">
                    <InputText @bind-Value="@searchModel.SearchText" class="form-control" placeholder="Search for papers..." />
                    <button type="submit" class="btn btn-primary"><i class="fas fa-search"></i> Search</button>
                </div>
                <div class="row advanced-search">
                    <div class="col-12">
                        <Switch @bind-Value="@searchModel.Advanced" Label="Advanced Filters" />
                    </div>
                    @if (searchModel.Advanced)
                    {
                        <div class="col-3">
                            <div class="form-group">
                                <label for="district">District</label>
                                <InputSelect id="district" class="form-select" @bind-Value="@searchModel.District">
                                    <option value="@string.Empty">All</option>
                                    @foreach (var district in districtService.Table.ToList())
                                    {
                                        <option value="@district.Name">@district.Name</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>
                        <div class="col-3">
                            <div class="form-group">
                                <label for="topic">Topic</label>
                                <InputSelect id="topic" class="form-select" @bind-Value="@searchModel.Topic">
                                    <option value="@string.Empty">All</option>
                                    @foreach (var district in researchTopicService.Table.ToList())
                                    {
                                        <option value="@district.Title">@district.Title</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>
                        <div class="col-3">
                            <div class="form-group">
                                <label for="startDate">Published Date</label>
                                <DateInput @bind-Value="@searchModel.StartDate" TValue="DateOnly" ElementId="startDate"></DateInput>
                            </div>
                        </div>
                        <div class="col-3">
                            <div class="form-group">
                                <label for="endDate">Published Date</label>
                                <DateInput @bind-Value="@searchModel.EndDate" ElementId="endDate" TValue="DateOnly"></DateInput>
                            </div>
                        </div>
                    }
                </div>
            </EditForm>
            <AuthorizeView>              
                <NotAuthorized>
                    <div class="mt-4 float-end">Not yet a member? <a href="signup">Signup here</a></div>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>
</div>
<div class="container mt-4">
    <div class="row">
        @if (pageModel != null)
        {
            if (pageModel.Items.Count() == 0)
            {
                if (searchModel.IsSearching)
                {
                    <center>
                        <div class="col-6 mt-4">
                            <Alert Dismissable OnClose="async ()=> await javaScriptRuntime.RefreshWindow()" Color="AlertColor.Info"> <Icon Name="IconName.InfoCircleFill" class="me-2"></Icon> No results found for your search.</Alert>
                         </div>
                     </center>
                }
                else
                {
                    <center>
                        <div class="col-6 mt-4">
                            <Alert Color="AlertColor.Primary"> <Icon Name="IconName.InfoCircleFill" class="me-2"></Icon> No research papers found. Be the first to submit a paper <a href="submit">here</a></Alert>
                        </div>
                    </center>
                }
            }
            else
            {
                foreach (var item in pageModel.Items)
                {
                    <div class="col-md-6">
                        <div class="card mb-3">
                            <div class="row g-0">
                                <div class="col-md-4">
                                    <img src="https://picsum.photos/320/500" alt="Paper Image" class="img-fluid">
                                </div>
                                <div class="col-md-8">
                                    <div class="card-body">
                                        <h5 class="card-title">@item.Title</h5>
                                        <p class="card-text">Authors: @GetAuthorNames(item)</p>
                                        <p class="card-text">Published: @item.DatePublished.Humanize(false)</p>
                                        <p class="card-text">Published in: @item.ResearchTopic.Title</p>

                                        <p class="card-text">District: @item.District.Name</p> <p class="card-text">Abstract: @GetBiographyPreview(item.Abstract)</p>
                                        <a href="research?p=@(item.Id)" class="btn btn-primary"><i class="fas fa-file-alt"></i> View More</a>
                                        <!--button-- @onclick="()=>DownloadPaper(item)" class="btn btn-danger"><i class="fas fa-file-pdf"></i> Download PDF</!--button-->
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            <div class="col-12 mt-4">
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center">
                        <li class='@(pageModel.PageNumber == 1?"page-item disabled":"page-item")'>
                            <button disabled="@(pageModel.PageNumber == 1)" @onclick="()=>GoToPage(pageModel.PageNumber-1)" class="page-link" href="#" tabindex="-1" aria-disabled="true">Previous</button>
                        </li>
                        @for (int i = 1; i <= pageModel.TotalPages; i++)
                        {
                            var pageItem = new PageItem(i, pageModel.PageNumber == i);
                            <li class='@(pageItem.Active?"page-item active":"page-item")'><button @onclick="()=>GoToPage(pageItem.PageNumber)" class="page-link">@i</button></li>
                        }
                        <li class='@(pageModel.PageNumber == pageModel.TotalPages?"page-item disabled":"page-item")'>
                            <button disabled="@(pageModel.PageNumber == pageModel.TotalPages)" @onclick="()=>GoToPage(pageModel.PageNumber+1)" class="page-link">Next</button>
                        </li>
                    </ul>
                </nav>
            </div>
        }
        else
        {
            <center><h6 class="text-primary mt-5">Loading ... </h6></center>
        }
    </div>
</div>
@code {
    Page<Research>? pageModel;
    SearchModel searchModel = new SearchModel();
    IEnumerable<Research> articlesList = new List<Research>();
    IQueryable<Research>? mainQuery = null;
    [Parameter]
    [SupplyParameterFromQuery(Name = "author")]
    public Guid AuthorId { get; set; }
    protected override async Task OnInitializedAsync()
    {
        if (AuthorId != Guid.Empty)
        {
            mainQuery = articleService.Table.Where(a => a.Authors.Any(a => a.Author.UserId == AuthorId));
        }
        else
        {
            mainQuery = articleService.Table;
        }
        await LoadResearchs();
    }
    void GoToPage(int pageNumber)
    {
        if (pageModel == null|| pageNumber == pageModel?.PageNumber || pageNumber == 0 || pageNumber>pageModel?.TotalPages)
            return;
        pageModel = pageModel.GoToPage(pageNumber);
    }
    async Task LoadResearchs(int page = 1, int size = 2, bool search = false, IQueryable<Research> query = default)
    {

        try
        {
            preloadService.Show(SpinnerColor.Warning);
            var pageRequest = new PageRequest(page, size);
            if (search && query == null)
            {
                throw new Exception("Search without parameters is not supported.");
            }
            if (search)
            {
                pageModel = await query!.GetPageAsync(pageRequest);
                await InvokeAsync(StateHasChanged);
                return;
            }

            pageModel = await (mainQuery ??= articleService.Table).GetPageAsync(pageRequest);
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message + e.StackTrace);
        }
        finally
        {
            preloadService.Hide();
        }

    }
    MarkupString GetAuthorNames(Research article)
    {
        var authors = article.Authors.Select(a => a.Author).ToList();
        var stringBuilder = new StringBuilder();
        var index = 1;
        @foreach (var item in authors)
        {
            stringBuilder.Append($"<a href='profile?uid={item.UserId}'>{item.Name}</a>");
            if (index != authors.Count)
            {
                stringBuilder.Append(", ");
            }
        }
        return new MarkupString(stringBuilder.ToString());
    }
    private string GetBiographyPreview(string biography)
    {
        const int maxPreviewLength = 100;
        var strippedBiography = Regex.Replace(biography, "<.*?>", string.Empty); // Remove HTML tags, if any
        return strippedBiography.Length > maxPreviewLength ? $"{strippedBiography.Substring(0, maxPreviewLength)}..." : strippedBiography;
    }
    async Task DownloadPaper(Research model)
    {
        try
        {
            await javaScriptRuntime.InvokeVoidAsync("downloadFile", new { blob = fileSystemHelper.ReadAsBlob(model.Document), fileName = $"link_{model.Title.Replace(" ", "_").Substring(0, 10)}.pdf" });
        }
        catch (Exception e)
        {
            toastService.Notify(new ToastMessage(ToastType.Danger, e.Message));
        }
    }
    Task SearchAsync()
    {
        preloadService.Show(SpinnerColor.Warning);
        var pageRequest = new PageRequest(1, 2);
        if (string.IsNullOrWhiteSpace(searchModel.SearchText) && !searchModel.Advanced)
        {
            preloadService.Hide();
            return Task.CompletedTask;
        }
        else if (!string.IsNullOrWhiteSpace(searchModel.SearchText) && searchModel.Advanced)
        {

            var query = articleService.Table.ToHashSet().Where(a => a.Title.Contains(searchModel.SearchText, StringComparison.OrdinalIgnoreCase) ||
                                        //a.Abstract.Contains(searchModel.SearchText, StringComparison.OrdinalIgnoreCase) ||
                                        a.ResearchTopic.Title.Contains(searchModel.SearchText, StringComparison.OrdinalIgnoreCase) ||
                                        a.ResearchTopic.Description.Contains(searchModel.SearchText, StringComparison.OrdinalIgnoreCase) ||
                                        a.District.Name.Contains(searchModel.SearchText, StringComparison.OrdinalIgnoreCase) ||
                                        a.District.Province.Contains(searchModel.SearchText, StringComparison.OrdinalIgnoreCase) ||
                                        a.Authors.Any(a => a.Author.FirstName.Contains(searchModel.SearchText, StringComparison.OrdinalIgnoreCase)) ||
                                        a.Authors.Any(a => a.Author.LastName.Contains(searchModel.SearchText, StringComparison.OrdinalIgnoreCase)) ||
                                        a.Authors.Any(a => a.Author.EmailAddress.Contains(searchModel.SearchText, StringComparison.OrdinalIgnoreCase)) ||
                                         (
                                            (a.District.Name == searchModel.District || string.IsNullOrEmpty(searchModel.District)) &&(a.ResearchTopic.Title == searchModel.Topic || string.IsNullOrEmpty(searchModel.Topic)) &&
                                            a.CreatedDate >= searchModel.StartDate.ToDateTime(new TimeOnly(0, 0, 0)) &&
                                            a.CreatedDate <= searchModel.EndDate.ToDateTime(new TimeOnly(0, 0, 0)
                                         )));
            pageModel =  query.GetPage(pageRequest);
            StateHasChanged();

        }
        else if (!string.IsNullOrWhiteSpace(searchModel.SearchText))
        {
            var query = articleService.Table.ToHashSet().Where(a => a.Title.Contains(searchModel.SearchText, StringComparison.OrdinalIgnoreCase) ||
                                             //a.Abstract.Contains(searchModel.SearchText, StringComparison.OrdinalIgnoreCase) ||
                                             a.ResearchTopic.Title.Contains(searchModel.SearchText, StringComparison.OrdinalIgnoreCase) ||
                                             a.ResearchTopic.Description.Contains(searchModel.SearchText, StringComparison.OrdinalIgnoreCase) ||
                                             a.District.Name.Contains(searchModel.SearchText, StringComparison.OrdinalIgnoreCase) ||
                                             a.District.Province.Contains(searchModel.SearchText, StringComparison.OrdinalIgnoreCase) ||
                                             a.Authors.Any(a => a.Author.FirstName.Contains(searchModel.SearchText, StringComparison.OrdinalIgnoreCase)) ||
                                             a.Authors.Any(a => a.Author.LastName.Contains(searchModel.SearchText, StringComparison.OrdinalIgnoreCase)) ||
                                             a.Authors.Any(a => a.Author.EmailAddress.Contains(searchModel.SearchText, StringComparison.OrdinalIgnoreCase)));                                      
            pageModel = query.GetPage(pageRequest);
            StateHasChanged();
        }
        else if (searchModel.Advanced)
        {
            var query = articleService.Table.ToHashSet().Where(a => (
                                            a.District.Name == searchModel.District || string.IsNullOrEmpty(searchModel.District)) &&(a.ResearchTopic.Title == searchModel.Topic || string.IsNullOrEmpty(searchModel.Topic)) &&
                                            a.CreatedDate >= searchModel.StartDate.ToDateTime(new TimeOnly(0, 0, 0)) &&
                                            a.CreatedDate <= searchModel.EndDate.ToDateTime(new TimeOnly(0, 0, 0)));
            pageModel = query.GetPage(pageRequest);
            StateHasChanged();
        }
        preloadService.Hide();
        return Task.CompletedTask;
    }

    class SearchModel
    {
        public string? SearchText { get; set; }
        public DateOnly StartDate { get; set; } = DateOnly.FromDateTime(DateTime.Today);
        public DateOnly EndDate { get; set; } = DateOnly.FromDateTime(DateTime.Today);
        public bool Advanced { get; set; }
        public bool IsSearching => !string.IsNullOrWhiteSpace(SearchText) || Advanced;
        public string District { get; set; }
        public string Topic { get; set; }
    }
}
