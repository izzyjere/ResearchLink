@page "/"
@using System.Text;
@using System.Text.RegularExpressions;

<PageTitle>Index</PageTitle>
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <form class="input-group">
                <input type="text" class="form-control" placeholder="Search for papers...">
                <button type="submit" class="btn btn-primary"><i class="fas fa-search"></i> Search</button>
            </form>
            <AuthorizeView>
                <Authorized>
                    <div class="mt-4 float-end">Have something in mind? <a href="submit">Submit your research here</a></div>
                </Authorized>
                <NotAuthorized>
                    <div class="mt-4 float-end">Not yet a member? <a href="signup">Signup here</a></div>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>
</div>
<div class="container mt-4">
    <div class="row">
        @if (articles.Any())
        {
            @foreach (var item in articles)
            {
                <div class="col-md-6">
                    <div class="card mb-3">
                        <div class="row g-0">
                            <div class="col-md-4">
                                <img src="https://picsum.photos/320/400" alt="Paper Image" class="img-fluid">
                            </div>
                            <div class="col-md-8">
                                <div class="card-body">
                                    <h5 class="card-title">@item.Title</h5>
                                    <p class="card-text">Authors: @GetAuthorNames(item)</p>
                                    <p class="card-text">Published: @item.DatePublished.Humanize(false)</p>
                                    @switch (item.Type)
                                    {
                                      case ResearchType.JournalArticle:
                                            <p class="card-text">Published in: Journal of XYZ</p>
                                            <p class="card-text">Volume: @item?.Volume?.Number pp: @item.Pages </p>
                                            break;
                                        default:
                                            <p class="card-text">Type: @item.Type.GetDescription()</p>
                                            <p class="card-text">Publisher: @item.Publisher.Name</p>
                                            break;
                                    }
                                    
                                    <p class="card-text">Abstract: @GetBiographyPreview(item.Description)</p>
                                    <a href="research?p=@(item.Id)" class="btn btn-primary"><i class="fas fa-file-alt"></i> View More</a>
                                    <button @onclick="()=>DownloadPaper(item)" class="btn btn-danger"><i class="fas fa-file-pdf"></i> Download PDF</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <center>
                <div class="col-6 mt-4">
                    <Alert Color="AlertColor.Primary"> <Icon Name="IconName.InfoCircleFill" class="me-2"></Icon> No research papers found. Be the first to submit a paper <a href="submit">here</a></Alert>
                </div>
            </center>
        }
    </div>
</div>

@code {
    IEnumerable<Article> articles = Enumerable.Empty<Article>();
    protected override async Task OnInitializedAsync()
    {
        await LoadArticles();
    }
    async Task LoadArticles()
    {
        articles = await articleService.Table.Include(a=>a.Volume).ThenInclude(v=>v.Journal).ToListAsync();
    }
    MarkupString GetAuthorNames(Article article)
    {
        var authors = article.Authors.Select(a => a.Author).ToList();
        var stringBuilder = new StringBuilder();
        var index = 1;
        @foreach (var item in authors)
        {
            stringBuilder.Append($"<a href='profile?uid={item.UserId}'>{item.Name}</a>");
            if (index != authors.Count)
            {
                stringBuilder.Append(", ");
            }
        }
        return new MarkupString(stringBuilder.ToString());
    }
    private string GetBiographyPreview(string biography)
    {
        const int maxPreviewLength = 100;
        var strippedBiography = Regex.Replace(biography, "<.*?>", string.Empty); // Remove HTML tags, if any
        return strippedBiography.Length > maxPreviewLength ? $"{strippedBiography.Substring(0, maxPreviewLength)}..." : strippedBiography;
    }
    async Task DownloadPaper(Article model)
    {
        await javaScriptRuntime.InvokeVoidAsync("downloadFile", new { blob = fileSystemHelper.ReadAsBlob(model.Document), fileName = $"link_{model.Title.Replace(" ", "_").Substring(0, 10)}.pdf" });
    }
}