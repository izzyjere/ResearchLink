@page "/"
@using System.Text;
@using System.Text.RegularExpressions;

<PageTitle>Index</PageTitle>
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <EditForm Model="@searchModel" OnValidSubmit="SearchAsync">
                <div class="input-group">
                    <InputText @bind-Value="@searchModel.SearchText" class="form-control" placeholder="Search for papers..." />
                    <button type="submit" class="btn btn-primary"><i class="fas fa-search"></i> Search</button>
                </div>
                <div class="row advanced-search">
                    <div class="col-12">
                        <Switch @bind-Value="@searchModel.Advanced" Label="Advanced Filters" />
                    </div>
                    @if (searchModel.Advanced)
                    {
                        <div class="col-4">
                            <label for="type">Research Type</label>
                            <InputSelect @bind-Value="@searchModel.Type" id="type" class="form-select">
                                @foreach (ResearchType item in Enum.GetValues(typeof(ResearchType)))
                                {
                                    <option value="@item">@item.GetDescription()</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="col-4">
                            <label for="startDate">Published Date</label>
                            <DateInput @bind-Value="@searchModel.StartDate" TValue="DateOnly" ElementId="startDate"></DateInput>
                        </div>
                        <div class="col-4">
                            <label for="endDate">Published Date</label>
                            <DateInput @bind-Value="@searchModel.EndDate" ElementId="endDate" TValue="DateOnly"></DateInput>
                        </div>
                    }
                </div>
            </EditForm>
            <AuthorizeView>
                <Authorized>
                    <div class="mt-4 float-end">Have something in mind? <a href="submit">Submit your research here</a></div>
                </Authorized>
                <NotAuthorized>
                    <div class="mt-4 float-end">Not yet a member? <a href="signup">Signup here</a></div>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>
</div>
<div class="container mt-4">
    <div class="row">
        @if (pageModel != null)
        {
            if (pageModel.Items.Count() == 0)
            {
                if (searchModel.IsSearching)
                {
                    <center>
                        <div class="col-6 mt-4">
                            <Alert Dismissable OnClose="async ()=> await javaScriptRuntime.RefreshWindow()" Color="AlertColor.Info"> <Icon Name="IconName.InfoCircleFill" class="me-2"></Icon> No results found for your search.</Alert>
                         </div>
                     </center>
                }
                else
                {
                    <center>
                        <div class="col-6 mt-4">
                            <Alert Color="AlertColor.Primary"> <Icon Name="IconName.InfoCircleFill" class="me-2"></Icon> No research papers found. Be the first to submit a paper <a href="submit">here</a></Alert>
                        </div>
                    </center>
                }
            }
            else
            {
                foreach (var item in pageModel.Items)
                {
                    <div class="col-md-6">
                        <div class="card mb-3">
                            <div class="row g-0">
                                <div class="col-md-4">
                                    <img src="https://picsum.photos/320/500" alt="Paper Image" class="img-fluid">
                                </div>
                                <div class="col-md-8">
                                    <div class="card-body">
                                        <h5 class="card-title">@item.Title</h5>
                                        <p class="card-text">Authors: @GetAuthorNames(item)</p>
                                        <p class="card-text">Published: @item.DatePublished.Humanize(false)</p>
                                        @switch (item.Type)
                                        {
                                            case ResearchType.JournalArticle:
                                                <p class="card-text">Published in: Journal of XYZ</p>
                                                <p class="card-text">Volume: @item?.Volume?.Number pp: @item.Pages </p>
                                                break;
                                            default:
                                                <p class="card-text">Type: @item.Type.GetDescription()</p>
                                                <p class="card-text">Publisher: @item.Publisher.Name</p>
                                                break;
                                        }

                                        <p class="card-text">Abstract: @GetBiographyPreview(item.Description)</p>
                                        <a href="research?p=@(item.Id)" class="btn btn-primary"><i class="fas fa-file-alt"></i> View More</a>
                                        <button @onclick="()=>DownloadPaper(item)" class="btn btn-danger"><i class="fas fa-file-pdf"></i> Download PDF</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            <div class="col-12 mt-4">
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center">
                        <li class='@(pageModel.PageNumber == 1?"page-item disabled":"page-item")'>
                            <button disabled="@(pageModel.PageNumber == 1)" @onclick="()=>GoToPage(pageModel.PageNumber-1)" class="page-link" href="#" tabindex="-1" aria-disabled="true">Previous</button>
                        </li>
                        @for (int i = 1; i <= pageModel.TotalPages; i++)
                        {
                            var pageItem = new PageItem(i, pageModel.PageNumber == i);
                            <li class='@(pageItem.Active?"page-item active":"page-item")'><button @onclick="()=>GoToPage(pageItem.PageNumber)" class="page-link">@i</button></li>
                        }
                        <li class='@(pageModel.PageNumber == pageModel.TotalPages?"page-item disabled":"page-item")'>
                            <button disabled="@(pageModel.PageNumber == pageModel.TotalPages)" @onclick="()=>GoToPage(pageModel.PageNumber+1)" class="page-link">Next</button>
                        </li>
                    </ul>
                </nav>
            </div>

        }
    </div>
</div>
@code {
    Page<Article>? pageModel;
    SearchModel searchModel = new SearchModel();
    IEnumerable<Article> articlesList = new List<Article>();
    IQueryable<Article>? query = null;
    [Parameter]
    [SupplyParameterFromQuery(Name = "type")]
    public int Type { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "author")]
    public Guid AuthorId { get; set; }
    protected override async void OnInitialized()
    {
        if (Type > 0)
        {
            query = articleService.Table.Where(a => a.Type == (ResearchType)Type);
        }
        else if (AuthorId != Guid.Empty)
        {
            query = articleService.Table.Where(a => a.Authors.Any(a => a.Author.UserId == AuthorId));
        }
        else
        {
            query = articleService.Table;
        }
        await LoadArticles();
    }    
    async Task GoToPage(int pageNumber)
    {
        if (pageNumber == pageModel?.PageNumber || pageNumber == 0 || pageNumber>pageModel?.TotalPages)
            return;
        await LoadArticles(pageNumber);
    }
    async Task LoadArticles(int page = 1, int size = 2, bool search = false)
    {

        try
        {
            preloadService.Show(SpinnerColor.Warning);
            if (search && query == null)
            {
                throw new Exception("Search without parameters is not supported.");
            }           
            var pageRequest = new PageRequest(page, size);
            pageModel = await (query ??= articleService.Table).GetPageAsync(pageRequest);
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message + e.StackTrace);
        }
        finally
        {
            preloadService.Hide();
        }

    }
    MarkupString GetAuthorNames(Article article)
    {
        var authors = article.Authors.Select(a => a.Author).ToList();
        var stringBuilder = new StringBuilder();
        var index = 1;
        @foreach (var item in authors)
        {
            stringBuilder.Append($"<a href='profile?uid={item.UserId}'>{item.Name}</a>");
            if (index != authors.Count)
            {
                stringBuilder.Append(", ");
            }
        }
        return new MarkupString(stringBuilder.ToString());
    }
    private string GetBiographyPreview(string biography)
    {
        const int maxPreviewLength = 100;
        var strippedBiography = Regex.Replace(biography, "<.*?>", string.Empty); // Remove HTML tags, if any
        return strippedBiography.Length > maxPreviewLength ? $"{strippedBiography.Substring(0, maxPreviewLength)}..." : strippedBiography;
    }
    async Task DownloadPaper(Article model)
    {
        await javaScriptRuntime.InvokeVoidAsync("downloadFile", new { blob = fileSystemHelper.ReadAsBlob(model.Document), fileName = $"link_{model.Title.Replace(" ", "_").Substring(0, 10)}.pdf" });
    }
    async Task SearchAsync()
    {
        if (string.IsNullOrWhiteSpace(searchModel.SearchText) && !searchModel.Advanced)
        {
            return;
        }
        else if (!string.IsNullOrWhiteSpace(searchModel.SearchText) && searchModel.Advanced)
        {

            query = query.Where(a => a.Title.Contains(searchModel.SearchText, StringComparison.OrdinalIgnoreCase) ||
                                       a.Description.Contains(searchModel.SearchText, StringComparison.OrdinalIgnoreCase) ||
                                       a.Authors.Any(a => a.Author.Name.Contains(searchModel.SearchText, StringComparison.OrdinalIgnoreCase)) ||
                                       a.Authors.Any(a => a.Author.EmailAddress.Contains(searchModel.SearchText, StringComparison.OrdinalIgnoreCase)) ||
                                       a.Type == searchModel.Type ||
                                       a.DatePublished >= searchModel.StartDate.ToDateTime(new TimeOnly(0, 0, 0)) &&
                                       a.DatePublished <= searchModel.EndDate.ToDateTime(new TimeOnly(0, 0, 0)));
            await LoadArticles(search: true);

        }
        else if (!string.IsNullOrWhiteSpace(searchModel.SearchText))
        {
            query = query.Where(a => a.Title.Contains(searchModel.SearchText, StringComparison.OrdinalIgnoreCase) ||
                                           a.Description.Contains(searchModel.SearchText, StringComparison.OrdinalIgnoreCase) ||
                                           a.Authors.Any(a => a.Author.Name.Contains(searchModel.SearchText, StringComparison.OrdinalIgnoreCase)) ||
                                           a.Authors.Any(a => a.Author.EmailAddress.Contains(searchModel.SearchText, StringComparison.OrdinalIgnoreCase)));
            await LoadArticles(search: true);
        }
        else if (searchModel.Advanced)
        {
            query = query.Where(a => a.Type == searchModel.Type ||
                                           a.DatePublished >= searchModel.StartDate.ToDateTime(new TimeOnly(0, 0, 0)) &&
                                           a.DatePublished <= searchModel.EndDate.ToDateTime(new TimeOnly(0, 0, 0)));
            await LoadArticles(search: true);
        }

    }

    class SearchModel
    {
        public string? SearchText { get; set; }
        public ResearchType Type { get; set; }
        public DateOnly StartDate { get; set; } = DateOnly.FromDateTime(DateTime.Today);
        public DateOnly EndDate { get; set; } = DateOnly.FromDateTime(DateTime.Today);
        public bool Advanced { get; set; }
        public bool IsSearching => !string.IsNullOrWhiteSpace(SearchText) || Advanced;
    }
}
