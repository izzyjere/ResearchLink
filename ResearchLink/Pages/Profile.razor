@page "/profile"
<div class="container mt-5">
    @if (Model != null)
    {
        <h3>@(Model.Title). @Model.FirstName @Model.LastName</h3>
        <div class="row mt-3">
            <div class="col-xs-12 col-md-6">
                <img style="object-fit: cover !important;" height="480" width="480" src='@(Model.HasAvatar?fileSystemHelper.ReadAsBlob(Model.Avatar):"https://via.placeholder.com/480")' alt="Author Image" class="img-fluid">
                @if (mine)
                {
                    <InputFile @ref="@fileInput" hidden accept=".png,.jpg,.jpeg" OnChange="OnUpload">Change Profile Picture</InputFile>
                    <Button Loading="@uploading" LoadingText="Uploading..." class="mt-3" @onclick="TriggerFileInput" Color="ButtonColor.Secondary">Change Profile Picture</Button>
                }
            </div>
            <div class="col-xs-12 col-md-6">
                <div class="card">
                    <div class="card-body">
                        <h3 class="card-title mb-3">Details</h3>
                        <EditForm OnValidSubmit="Save" Model="@Model">
                            <DataAnnotationsValidator />

                            <p class="card-text">
                                <b>Affiliation: </b>
                                @if (mine)
                                {
                                    <InputText type="text" @bind-Value="@Model.Affliation" class="form-control" />
                                }
                                else
                                {
                                    @Model.Affliation
                                }
                            </p>
                            <p class="card-text"><b>Member Since:</b> @Model.DateJoined.ToString("dd MMM, yyyy")</p>
                            <p class="card-text"><b>Email:</b> <a href="mailto:@(Model.EmailAddress)">@Model.EmailAddress</a> </p>
                            <p style="text-align:justify" class="card-text">
                                <span style="font-size:large;" class="mb-3"><b>Biography:</b></span><br />

                                @if (mine)
                                {
                                    @if (!editing)
                                    {
                                        @Model.Biography

                                    <br />
                                    <Button @onclick="()=>editing=true" title="Edit bio" Class="mt-4" Outline Style="margin-right:20px" Color="ButtonColor.Success"><i class="oi oi-pencil"></i></Button>
                                    }
                                    else
                                    {
                                        <InputTextArea required class="form-control mt-4 mb-3" maxlength="2000" rows="10" @bind-Value="@Model.Biography" />

                                    }


                                    <Button Class="mt-4" Color="ButtonColor.Primary" Loading="@saving" Type="ButtonType.Submit" LoadingText="Saving..">Save</Button>
                                }
                                else
                                {
                                    @Model.Biography <br/>
                                    <Button Class="mt-4" @onclick='()=>Navigation.NavigateTo($"/?author={Model.Id}",true)' Color="ButtonColor.Primary">View Publications</Button>
                                }

                            </p>
                            <!-- Add any other author details here -->
                        </EditForm>
                    </div>
                </div>
            </div>

        </div>
    }

</div>


@code {
    [SupplyParameterFromQuery(Name = "uid")]
    [Parameter]
    public string UserId { get; set; }
    Author? Model = new();
    [CascadingParameter]
    Task<AuthenticationState> AuthenticationStateTask { get; set; }
    ClaimsPrincipal? CurrentUser { get; set; }
    bool mine, editing;
    bool uploading;
    private async void OnUpload(InputFileChangeEventArgs eventArgs)
    {
        uploading = true;
        var file = eventArgs.File;
        var fileStream = file.OpenReadStream(file.Size);
        var ms = new MemoryStream();
        await fileStream.CopyToAsync(ms);
        var fileModel = fileSystemHelper.Upload(ms, file.ContentType, Core.Shared.FileStore.images);
        Model.Avatar = fileModel;
        authorService.Save(Model);
        uploading = false;
        await javaScriptRuntime.InvokeVoidAsync("window.location.reload");
    }
    protected override async Task OnInitializedAsync()
    {

        if (!string.IsNullOrEmpty(UserId))
        {
            var user = await userService.GetByIdAsync(UserId);
            if (user != null)
            {
                Model = await authorService.Table.FirstOrDefaultAsync(a => a.UserId==Guid.Parse(user.Id));
                StateHasChanged();
            }
        }
        else
        {
            CurrentUser = (await AuthenticationStateTask).User;
            //Getting Current User
            if (CurrentUser != null && CurrentUser.Identity.IsAuthenticated)
            {

                Model = await authorService.Table.FirstOrDefaultAsync(a => a.UserId==CurrentUser.GetUserId());
                mine = true;
                StateHasChanged();
            }
            else
            {
                Navigation.NavigateTo("login?next=profile", true);
            }
        }

    }
    bool saving;
    async void Save()
    {
        saving = true;
        var save = authorService.Save(Model);
        if (save.Succeded)
        {
            await javaScriptRuntime.InvokeVoidAsync("window.location.reload");
        }
    }
    InputFile fileInput;
    private async void TriggerFileInput()
    {
        await javaScriptRuntime.InvokeVoidAsync("triggerInput", fileInput.Element);
    }
}
