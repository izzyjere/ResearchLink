@page "/research/gap/view"
@using System.Globalization;
@using System.Text;
<div class="container mt-5">
    @if (Model is null)
    {
        <div class="d-flex align-items-center justify-content-center">
            <h6 class="text-primary">Loading ...</h6>
        </div>
    }
    else
    {
        <Card>
            <CardHeader>
                <CardTitle>@Model.Title</CardTitle>
            </CardHeader>
            <CardBody>
                <div class="row">
                    <div class="col-xs-12 col-md-6">
                        <h6>Description</h6><hr />
                        <p class="text-justify pa-2">@Model.Description</p>
                    </div>
                    <div class="col-xs-12 col-md-6">
                        <div class="row">
                            <div class="col-6 col-xs-12">
                                Requested : <span class="text-info">@Model.CreatedDate.Humanize(false)</span>
                            </div>
                            <div class="col-6 col-xs-12">
                                District : <span class="text-info">@Model.District.Name</span>
                            </div>
                        </div>
                        <hr />
                        <div class="row mt-4 p-4">
                            <table class="table table-striped table-bordered table-sm">
                                <colgroup>
                                    <col width="40%" />
                                    <col width="60%" />
                                </colgroup>
                                <tr>
                                    <td class="text-bold">Requested By:</td>
                                    <td>@Model?.Proposer</td>
                                </tr>
                                <tr>
                                    <td class="text-bold">Topic:</td>
                                    <td>@Model?.ResearchTopic?.Title</td>
                                </tr>
                                <tr>
                                    <td class="text-bold">District:</td>
                                    <td>@Model?.District?.Name</td>
                                </tr>
                                <tr>
                                    <td class="text-bold">Province:</td>
                                    <td>@Model?.District?.Province</td>
                                </tr>

                            </table>
                        </div>
                        <div class="row p-4">
                            @if (Model.ProposedAuthors.Any())
                            {
                                <div class="col-12">
                                    <h6>Proposed Authors</h6>
                                    <ul style="max-height:250px" class="list-group overflow-auto">
                                        @foreach (var item in Model.ProposedAuthors)
                                        {
                                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                                <div class="me-3">
                                                    <img style="object-fit:contain !important;" src="@(item.Author.HasAvatar? fileSystemHelper.ReadAsBlob(item?.Author?.Avatar):$"generateAvatar/{item.Author.Initials}/40/40/5")" alt="User Profile" class="img-fluid">

                                                    <a href="profile?uid=@(item.Author.UserId)" class="link-normal">@item.Author.FullName</a>
                                                </div>

                                                <span class="badge badge-primary badge-pill">1</span>
                                            </li>
                                        }

                                    </ul>
                               </div>
                                
                            }
                            @if (Model.Researches.Any())
                            {
                                <div class="col-12">
                                    <h6>Research Done on this Gap</h6>
                                    <ul style="max-height:250px" class="list-group overflow-auto">
                                        @foreach (var item in Model.Researches)
                                        {
                                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                                <div class="me-3">
                                                    <a href="research?p=@(item.Id)" class="link-normal">@item.Title </a>
                                                     (@GetAuthorNames(item))
                                                </div>                                                
                                            </li>
                                        }

                                    </ul>
                                </div>
                                
                            } 
                            <div class="col-6">
                                <AuthorisedLink Class="btn btn-primary mt-4" Href=@($"submit?gap={Model.Id}")>Submit a reasearch</AuthorisedLink>
                            </div>                           
                        </div>
                    </div>
                    <div class="col-12">
                        <!-- Comments Section -->
                        <div class="mt-4">
                            <h2>Comments</h2>
                            @if (Model.Comments.Any())
                            {
                                foreach (var item in Model.Comments)
                                {
                                    <div class="comment">
                                        <div class="mb-2">
                                            <strong>@item.User</strong> - <small class="text-info">Posted: @item.CreatedDate.Humanize(false)</small>
                                        </div>
                                        <p class="commentContent">@ConvertUnicodeToEmoji(item.Content)</p>
                                        @if (item.Replying)
                                        {
                                            <h6>Leave a Reply</h6>
                                            <EditForm Model="@commentReply" OnValidSubmit="@(()=> AddReply(item))">
                                                <DataAnnotationsValidator />
                                                <div class="mb-3">
                                                    <label for='@($"reply-{item.Id.ToString().Substring(0,8)}")' class="form-label">Reply</label>
                                                    <InputTextArea @bind-Value="@commentReply.Content" class="form-control" id='@($"reply-{item.Id.ToString().Substring(0,8)}")' rows="4"></InputTextArea>
                                                    <ValidationMessage For="()=>commentReply.Content" />
                                                </div>
                                                <Button Loading="@savingData" LoadingText="Saving.." Type="ButtonType.Submit" Color="ButtonColor.Primary">Submit</Button>
                                            </EditForm>
                                        }
                                        else
                                        {
                                            <Button Color="ButtonColor.Link" Style="btn-link" @onclick="()=>InitReply(item)" class="reply-link">Reply</Button>
                                        }
                                        <!-- Replies -->
                                        @if (item.Replies !=null && item.Replies.Any())
                                        {
                                            foreach (var reply in item.Replies)
                                            {
                                                <div class="ml-4 reply">
                                                    <div class="mb-2">
                                                        <strong>@reply.User</strong> - <small class="text-info">Replied: @reply.CreatedDate.Humanize(false)</small>
                                                    </div>
                                                    <p class="commentContent">@ConvertUnicodeToEmoji(reply.Content)</p>
                                                </div>
                                            }
                                        }
                                    </div>
                                }
                            }
                        </div>

                        <!-- Comment Form -->
                        <div class="mt-5 comment-form">
                            <h2>Leave a Comment</h2>
                            <EditForm Model="@commentModel" OnValidSubmit="AddComment">
                                <DataAnnotationsValidator />
                                <div class="mb-3">
                                    <label for="comment" class="form-label">Comment</label>
                                    <InputTextArea @bind-Value="@commentModel.Content" class="form-control" id="comment" rows="4"></InputTextArea>
                                    <ValidationMessage For="()=>commentModel.Content" />
                                </div>
                                <Button Loading="@savingData" LoadingText="Saving.." Type="ButtonType.Submit" Color="ButtonColor.Primary">Submit</Button>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </CardBody>
            <CardFooter>
                @if (isMyResearch)
                {
                    <a href="submit/gap?p=@(Model.Id)" class="btn btn-success mx-4"><i class="fas fa-edit"></i> Edit</a>
                }
                <button disabled="@(Model.Document == null)" @onclick="DownloadPaper" class="btn btn-danger"><i class="fas fa-file-pdf"></i> Download PDF</button>
                <button disabled="@(Model.Document == null)" @onclick="async ()=>  await viewDocModal.ShowAsync()" class="btn btn-info"><i class="fas fa-file"></i> View</button>
            </CardFooter>
        </Card>
        <Modal @ref=@viewDocModal Size="ModalSize.Large" ShowCloseButton IsVerticallyCentered>
         <BodyTemplate>
             <embed width="100%" type="application/pdf" src="@fileSystemHelper.ReadAsBlob(Model.Document)" style="height:70vh" />
         </BodyTemplate>
         <FooterTemplate>
             <Button @onclick=" async ()=> await viewDocModal.HideAsync()" Color="ButtonColor.Secondary">Close</Button>
         </FooterTemplate>
     </Modal>
    }
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "p")]
    public Guid Id { get; set; }
    ResearchGap? Model { get; set; }
    Modal viewDocModal;
    bool isMyResearch;
    [CascadingParameter]
    Task<AuthenticationState> AuthenticationStateTask { get; set; }
    ResearchGapComment commentModel;
    CommentReply commentReply;
    ClaimsPrincipal? currentUser;
    bool savingData;

    protected override async Task OnInitializedAsync()
    {
        currentUser = (await AuthenticationStateTask).User;
        await ReloadData();
    }
    async Task ReloadData()
    {

        Model = researchGapService.Get(Id);
        if (Model is null)
        {
            Navigation.NavigateTo("/", true);
            return;
        }
        if (Model != null && currentUser?.Identity != null && currentUser.Identity.IsAuthenticated)
        {
            isMyResearch = Model.ProposerEmail == currentUser.GetEmail();
        }
        if (Model != null)
        {
            Model.Comments ??= new List<ResearchGapComment>();
        }
        commentModel = InitComment();
        commentReply = new CommentReply();
        await InvokeAsync(StateHasChanged);
    }
    async Task DownloadPaper()
    {
        try
        {
            await javaScriptRuntime.InvokeVoidAsync("downloadFile", new { blob = fileSystemHelper.ReadAsBlob(Model.Document), fileName = $"link_{Model.Title.Replace(" ", "_").Substring(0, 10)}.pdf" });
        }
        catch (Exception e)
        {
            toastService.Notify(new ToastMessage(ToastType.Danger, e.Message));
        }
    }
    ResearchGapComment InitComment()
    {
        var comment = new ResearchGapComment();
        if (currentUser?.Identity != null && currentUser.Identity.IsAuthenticated)
        {
            comment.User = currentUser.GetFullName();
        }
        else
        {
            comment.User = "Anonymous";
        }
        comment.ResearchId = Model.Id;
        return comment;
    }
    void InitReply(ResearchGapComment comment)
    {
        commentReply = new CommentReply();
        if (currentUser?.Identity != null && currentUser.Identity.IsAuthenticated)
        {
            commentReply.User = currentUser.GetFullName();
        }
        else
        {
            commentReply.User = "Anonymous";
        }
        comment.Replying = true;
    }
    async void AddComment()
    {
        savingData = true;
        commentModel.Content = EncodeEmojis(commentModel.Content);
        commentModel.ResearchId = Model.Id;
        var save = researchGapCommentService.Save(commentModel);
        if (save.Succeded)
        {
            await ReloadData();
        }
        else
        {
            toastService.Notify(new ToastMessage(ToastType.Danger, "Failed to save comment try again."));
        }
        savingData = false;
    }
    async void AddReply(ResearchGapComment comment)
    {
        savingData = true;
        commentReply.Content = EncodeEmojis(commentReply.Content);
        commentReply.CreatedDate = DateTime.Now;
        comment.Replies ??= new List<CommentReply>();
        comment.Replies.Add(commentReply);
        var save = researchGapCommentService.Save(comment);
        if (save.Succeded)
        {
            comment.Replying = false;
            await ReloadData();
        }
        else
        {
            toastService.Notify(new ToastMessage(ToastType.Danger, "Failed to save reply try again."));
        }
        savingData = false;

    }
    string EncodeEmojis(string text)
    {
        return string.Join("", text.Select(c => c < 128 ? c.ToString() : $"\\u{(int)c:X4}"));
    }
    private string ConvertUnicodeToEmoji(string encodedText)
    {
        var decodedText = Regex.Replace(encodedText, @"\\u(?<Value>[a-zA-Z0-9]{4})", m =>
        {
            var utf32 = int.Parse(m.Groups["Value"].Value, NumberStyles.HexNumber);
            if (utf32 > 0xFFFF)
            {
                // Handle surrogate pairs for emojis outside the BMP
                return char.ConvertFromUtf32(utf32);
            }
            else
            {
                return ((char)utf32).ToString();
            }
        });
        return decodedText;
    }
    MarkupString GetAuthorNames(Research article)
    {
        var authors = article.Authors.Select(a => a.Author).ToList();
        var stringBuilder = new StringBuilder();
        var index = 1;
        @foreach (var item in authors)
        {
            stringBuilder.Append($"<a class='link-normal' href='profile?uid={item.UserId}'>{item.Name}</a>");
            if (index != authors.Count)
            {
                stringBuilder.Append(", ");
            }
        }
        return new MarkupString(stringBuilder.ToString());
    }
       
}
