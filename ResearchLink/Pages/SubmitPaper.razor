@page "/submit"
@page "/edit"
@using DragZoneInputFile
@using ResearchLink.Core.Shared;
<div class="container mt-5">
    <h3>@(Id!=Guid.Empty ? "Edit" : "Submit a") research</h3>
    <EditForm Model="@Model" OnValidSubmit="SubmitPaperAsync">
        <div class="row">
            <DataAnnotationsValidator />
            <Card class="col-xs-12 col-md-6">
                <CardBody class="row">
                    <div class="row">
                        <div class="col-12 col-md-6">
                            <div class="col-12">
                                <div class="form-group">
                                    <label for="title">Research Title</label>
                                    <InputText type="text" class="form-control" id="title" @bind-Value="@Model.Title" />
                                    <ValidationMessage For="()=>Model.Title" />
                                </div>
                            </div>
                            <div class="col-12">
                                <div class="form-group">
                                    <label for="abstract">Abstract</label>
                                    <InputTextArea placeholder="type or paste your abstract here." rows="25" style="max-height:65vh" class="form-control" id="abstract" @bind-Value="@Model.Abstract" />
                                    <ValidationMessage For="()=>Model.Abstract" />
                                </div>
                            </div>
                        </div>
                        <div class="col-12 col-md-6">
                            <div class="col-12 mb-3">
                                <div class="form-group">
                                    <label for="district">District</label>
                                    @if(researchGap is not null)
                                    {
                                        <InputText id="district" @bind-Value="@researchGap.District.Name" disabled class="form-control"></InputText>
                                    }
                                    else
                                    {
                                        <AutoComplete @bind-Value="@DistrictName"
                                                      ElementId="district"
                                                      DataProvider="DistrictDataProvider"
                                                      TItem="District"
                                                      StringComparison="StringComparison.OrdinalIgnoreCase"
                                                      OnChanged="OnDistrictChanged"
                                                      Placeholder="Type district name"
                                                      PropertyName="Name" />
                                        
                                    }  
                                    <ValidationMessage For="()=>Model.DistrictId" />
                                </div>
                            </div>
                            <div class="col-12 mb-3">
                                <div class="form-group">
                                    <label for="researchTopic">ResearchTopic</label>
                                    @if (researchGap is not null)
                                    {
                                        <InputText id="researchTopic" @bind-Value="@researchGap.ResearchTopic.Title" disabled class="form-control"></InputText>
                                    }
                                    else
                                    {
                                        @if (createNewResearchTopic && researchTopicModel == null)
                                        {
                                            <InputText placeholder="New research popic title" id="researchTopic" @bind-Value="@ResearchTopicName" class="form-control" />
                                            <InputText placeholder="New research popic description" id="researchTopicDescription" @bind-Value="@ResearchTopicDescription" class="form-control mt-2" />
                                            <InputText placeholder="New research popic objective" id="objective" @bind-Value="@ResearchTopicObjective" class="form-control mt-2" />
                                            <Icon class="mt-2" Color="IconColor.Info" title="save topic" @onclick="AddResearchTopic" Name="@IconName.WindowPlus"></Icon>
                                        }
                                        else
                                        {
                                            <InputSelect id="researchTopic" TValue="Guid" ValueExpression="()=>(researchTopicGuid)" ValueChanged="OnResearchTopicChanged" class="form-select">
                                                <option value="@Guid.Empty">Select researchTopic</option>
                                                @foreach (var item in researchTopics)
                                                {
                                                    <option value="@item.Id">@item.Title</option>
                                                }
                                                <option class="text-info" value="@creatingGuid">Create new researchTopic</option>
                                            </InputSelect>
                                        }}
                                </div>
                            </div>
                            @if (researchGap is not null)
                            {
                                <div col-12 mb-3>
                                    <div class="form-group">
                                        <label for="research-gap">Research Gap</label>
                                        <InputText id="research-gap" @bind-Value="@researchGap.Title" disabled class="form-control"></InputText>
                                    </div>
                                </div>
                            }
                            <div col-12 mb-3>
                                <div class="form-group">
                                    <label for="authors">Author(s)</label>
                                    <AutoComplete @bind-Value="@articleAuthor"
                                                  ElementId="authors"
                                                  DataProvider="AuthorsDataProvider"
                                                  TItem="Author"
                                                  StringComparison="StringComparison.OrdinalIgnoreCase"
                                                  OnChanged="OnAuthorPicked"
                                                  Placeholder="Type author name"
                                                  PropertyName="FullName" />
                                </div>
                                <div style="height:150px; overflow:auto" class="mt-3">
                                    <ol class="list-group list-group-numbered">
                                        @foreach (var item in articleAuthors)
                                        {
                                            <li class="list-group-item list-group-item-info d-flex justify-content-between align-items-start">
                                                <div class="ms-2 me-auto">
                                                    @(item.Title).   @item.FirstName @item.LastName
                                                </div>
                                                <Icon Color="IconColor.Danger" @onclick="()=>articleAuthors.Remove(item)" title="remove this author" Name="IconName.Trash" />
                                            </li>
                                        }
                                    </ol>
                                </div>
                            </div>
                        </div>
                    </div>
                </CardBody>
            </Card>
            <Card class="col-xs-12 col-md-6">
                <CardHeader>
                    <Button Color="ButtonColor.Success" Type="ButtonType.Submit">Submit</Button>
                </CardHeader>
                <CardBody class="row">
                    <DragZoneInputFile FileFormats=".pdf" Class="col-12" OnUpload="OnFileUpload"></DragZoneInputFile>

                    @if (documentFile !=null)
                    {
                        <div id="documentPreview" class="col-12">
                            <embed id="dViewer" src="@(fileSystemHelper.ReadAsBlob(documentFile))" type="application/pdf" width="100%" height="90%" />
                        </div>
                    }
                </CardBody>
            </Card>
        </div>
    </EditForm>
</div>
<ConfirmDialog @ref="dialog" />
@code {
    Research Model = new Research { Authors = new List<AuthorResearch>() };
    Author? currentAuthor;
    [CascadingParameter]
    Task<AuthenticationState> AuthenticationStateTask { get; set; }
    ClaimsPrincipal? claimsPrincipal { get; set; }
    List<Author> authors = new List<Author>();
    List<Author> articleAuthors = new List<Author>();
    string articleAuthor, articleTitle;

    FileModel? documentFile;
    ConfirmDialog dialog;
    [Parameter]
    [SupplyParameterFromQuery(Name = "p")]
    public Guid Id { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "gap")]
    public Guid ResearchGapId { get; set; }
    ResearchGap? researchGap;
    private async Task<AutoCompleteDataProviderResult<Author>> AuthorsDataProvider(AutoCompleteDataProviderRequest<Author> request)
    {

        authors = await authorService.Table.ToListAsync(); // call a service or an API to pull the authors
        return await Task.FromResult(new AutoCompleteDataProviderResult<Author> { Data = authors, TotalCount=authors.Count });
    }
    private async Task<AutoCompleteDataProviderResult<District>> DistrictDataProvider(AutoCompleteDataProviderRequest<District> request)
    {
        districts = await districtService.Table.ToListAsync(); // call a service or an API to pull the authors
        return await Task.FromResult(new AutoCompleteDataProviderResult<District> { Data = districts, TotalCount=districts.Count() });
    }
    protected override async Task OnInitializedAsync()
    {
        claimsPrincipal = (await AuthenticationStateTask).User;
        if (claimsPrincipal !=null && claimsPrincipal.Identity.IsAuthenticated)
        {
            var currentAuthor = await authorService.Table.FirstOrDefaultAsync(a => a.UserId == claimsPrincipal.GetUserId());
            if (currentAuthor is not null)
            {

                articleAuthors.Add(currentAuthor);
                if (Id != Guid.Empty)
                {
                    var model = await articleService.Table
                                      .FirstOrDefaultAsync(x => x.Id==Id);
                    if (model is not null)
                    {
                        Model = model;
                        StateHasChanged();
                    }

                }
                else if (ResearchGapId != Guid.Empty)
                {
                    researchGap = researchGapService.Get(ResearchGapId);
                    if (researchGap is not null)
                    {
                        Model.ResearchGapId = researchGap.Id;
                        Model.ResearchTopicId = researchGap.ResearchTopicId;
                        Model.Title = "Resolve: " + researchGap.Title;
                        Model.DistrictId = researchGap.DistrictId;
                    }
                    else
                    {
                        Navigation.NavigateTo("/submit", true);
                    }

                }
            }
            else
            {
                Navigation.NavigateTo("/profile", true);
            }

        }
        else
        {
            Navigation.NavigateTo("login?next=submit", true);
        }

    }

    void OnAuthorPicked(Author author)
    {
        if (author is not null)
        {
            if (articleAuthors.Any(a => a.Id==author.Id))
            {
                toastService.Notify(new ToastMessage
                    {
                        Message = "This author has already been added",
                        IconName = IconName.Exclamation,
                        Type = ToastType.Warning
                    });
                articleAuthor = string.Empty;
                return;
            }
            articleAuthors.Add(author);
            articleAuthor = string.Empty;
            StateHasChanged();
        }
    }
    async void SubmitPaperAsync()
    {

        if (articleAuthors.Count == 0)
        {
            toastService.Notify(new ToastMessage
                {
                    Message = "Add at least one author",
                    IconName = IconName.Exclamation,
                    Type = ToastType.Danger
                });
            return;
        }        
        if (Model.ResearchTopicId == Guid.Empty)
        {
            toastService.Notify(new ToastMessage
                {
                    Message = "Please select a research topic.",
                    IconName = IconName.Exclamation,
                    Type = ToastType.Danger
                });
            return;
        }
        if (Model.Document is null)
        {
            toastService.Notify(new ToastMessage
                {
                    Message = "Upload a document",
                    IconName = IconName.Exclamation,
                    Type = ToastType.Danger
                });
            return;
        }
        var confirmation = await dialog.ShowAsync("Confirm", "Are you sure you want to submit this paper?", new ConfirmDialogOptions { IsVerticallyCentered=true });
        if (!confirmation)
        {
            return;
        }      
        int order = 1;
        foreach (var author in articleAuthors)
        {
            Model.Authors.Add(new AuthorResearch { AuthorId = author.Id, Order=order });
            order++;
        }
        Model.DatePublished = DateTime.Now;
        var saved = articleService.Save(Model);
        if (saved.Succeded)
        {
            toastService.Notify(new ToastMessage { Title="Success", Message = "Paper Submited Successfully.", Type=ToastType.Success, IconName=IconName.Check });
            Navigation.NavigateTo($"/?author={claimsPrincipal.GetUserId().ToString()}", true);
        }
        else
        {
            toastService.Notify(new ToastMessage { Title="Error", Message = "Paper submission failed.", Type=ToastType.Danger, IconName=IconName.Exclamation });
        }
    }

    async Task OnFileUpload(InputFileChangeEventArgs args)
    {
        try
        {
            preloadService.Show(SpinnerColor.Warning);
            var file = args.File;
            if (file.Size > 10000000)
            {
                toastService.Notify(new ToastMessage(ToastType.Danger, "File size can not be more than 10mb."));
                return;
            }
            var fileStream = file.OpenReadStream(10000000);
            var memoryStream = new MemoryStream();
            await fileStream.CopyToAsync(memoryStream);
            documentFile = fileSystemHelper.Upload(memoryStream, file.ContentType, Core.Shared.FileStore.documents);
            if (documentFile is null)
            {
                toastService.Notify(new ToastMessage(ToastType.Danger, "File upload failed. Try again."));
                return;
            };
            Model.Document = documentFile;
            StateHasChanged();
            preloadService.Hide();
        }
        catch (Exception)
        {
            toastService.Notify(new ToastMessage(ToastType.Danger, "File upload failed. Try again."));
        }
        finally
        {
            preloadService.Hide();
        }

    }

}
@code {
    bool createNewDistrict, createNewResearchTopic;
    IEnumerable<District> districts = new List<District>();
    IEnumerable<string> provinces = new List<string>();
    IEnumerable<ResearchTopic> researchTopics = new List<ResearchTopic>();
    Guid creatingGuid = Guid.NewGuid();
    string DistrictName { get; set; }
    string ResearchTopicName { get; set; }
    string ResearchTopicDescription { get; set; }
    string ResearchTopicObjective { get; set; }
    ResearchTopic? researchTopicModel;
    Guid researchTopicGuid { get => researchTopicModel == null ? creatingGuid : researchTopicModel.Id; }
    void OnDistrictChanged(District district)
    {
        if (district != null)
        {
            Model.DistrictId = district.Id;
        }
    }
    void OnResearchTopicChanged(Guid researchTopicId)
    {

        if (researchTopicId == creatingGuid)
        {
            createNewResearchTopic = true;
        }
        else
        {
            createNewResearchTopic = false;
            researchTopicModel = researchTopics.FirstOrDefault(p => p.Id == researchTopicId);
            Model.ResearchTopicId = researchTopicModel.Id;
            StateHasChanged();

        }
    }
    protected override void OnInitialized()
    {
        researchTopics = researchTopicService.Table.ToList();
    }
    bool processing;
    void AddResearchTopic()
    {
        if (string.IsNullOrWhiteSpace(ResearchTopicName) || string.IsNullOrWhiteSpace(ResearchTopicDescription))
        {
            return;
        }
        if (!researchTopics.Any(j => j.Title.Equals(ResearchTopicName, StringComparison.OrdinalIgnoreCase)))
        {
            processing = true;
            var researchTopic = new ResearchTopic { Title = ResearchTopicName, Description = ResearchTopicDescription, Objective = ResearchTopicObjective };
            researchTopicService.Save(researchTopic);
            researchTopics = researchTopicService.Table.ToList();
            researchTopicModel = researchTopics.FirstOrDefault(j => j.Title.Equals(ResearchTopicName, StringComparison.OrdinalIgnoreCase));
            ResearchTopicName = string.Empty;
            ResearchTopicDescription = string.Empty;
            processing = false;
            createNewResearchTopic = false;
            StateHasChanged();
        }
    }

}
