@page "/submit"
@using ResearchLink.Core.Shared;
<div class="container mt-5">
    <h3>Submit Paper</h3>
    <EditForm Model="@Model" OnValidSubmit="SubmitPaperAsync">
        <div class="row">
            <DataAnnotationsValidator />
            <Card class="col-xs-12 col-md-6">
                <CardBody class="row">
                    <div class="row">
                        <div class="col-12 col-md-6">
                            <div class="col-12">
                                <div class="form-group">
                                    <label for="title">Research Title</label>
                                    <InputText type="text" class="form-control" id="title" @bind-Value="@Model.Title" />
                                    <ValidationMessage For="()=>Model.Title" />
                                </div>
                            </div>
                            <div class="col-12">
                                <div class="form-group">
                                    <label for="abstract">Abstract</label>
                                    <InputTextArea placeholder="type or paste your abstract here." rows="25" style="max-height:65vh" class="form-control" id="abstract" @bind-Value="@Model.Description" />
                                    <ValidationMessage For="()=>Model.Description" />
                                </div>
                            </div>
                        </div>
                        <div class="col-12 col-md-6">
                            <div class="col-12 mb-3">
                                <div class="form-group">
                                    <label for="publisher">Publisher</label>
                                    @if (createNewPublisher && Model.PublisherId == Guid.Empty)
                                    {
                                        <InputText placeholder="New publisher name" id="publisher" @bind-Value="@PublisherName" class="form-control" />
                                        <Icon class="mt-2" Color="IconColor.Success" title="Save" Name="@IconName.DatabaseAdd" @onclick="AddPublisher"></Icon>
                                    }
                                    else
                                    {
                                        <InputSelect id="publisher" TValue="Guid" ValueExpression="()=>Model.PublisherId" ValueChanged="OnPublisherChanged" class="form-select">
                                            <option value="@Guid.Empty">Select publisher</option>
                                            @foreach (var publisher in publishers)
                                            {
                                                <option value="@publisher.Id">@publisher.Name</option>
                                            }
                                            <option class="text-info" value="@creatingGuid">Create new publisher</option>
                                        </InputSelect>
                                    }
                                </div>
                            </div>
                            <div class="col-12 mb-3">
                                <div class="form-group">
                                    <label for="type">Research Type</label>
                                    <InputSelect type="text" class="form-select" id="type" @bind-Value="@Model.Type">
                                        @foreach (ResearchType item in Enum.GetValues(typeof(ResearchType)))
                                        {
                                            <option value="@item">@item.GetDescription()</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="()=>Model.Type" />
                                </div>
                            </div>
                            @if (Model.Type == ResearchType.JournalArticle)
                            {
                                <div class="col-12 mb-3">
                                    <div class="form-group">
                                        <label for="journal">Journal</label>
                                        @if (createNewJournal && journalModel == null)
                                        {
                                            <InputText placeholder="New journal name" id="journal" @bind-Value="@JournalName" class="form-control" />
                                            <InputText placeholder="New journal description" id="journalDescription" @bind-Value="@JournalDescription" class="form-control mt-2" />
                                            <Icon class="mt-2" Color="IconColor.Info" title="Add Volumes" Name="@IconName.WindowPlus" @onclick="AddJournalVolumes"></Icon>
                                        }
                                        else
                                        {
                                            <InputSelect id="journal" TValue="Guid" ValueExpression="()=>(journalGuid)" ValueChanged="OnJournalChanged" class="form-select">
                                                <option value="@Guid.Empty">Select journal</option>
                                                @foreach (var item in journals)
                                                {
                                                    <option value="@item.Id">@item.Name</option>
                                                }
                                                <option class="text-info" value="@creatingGuid">Create new journal</option>
                                            </InputSelect>
                                        }
                                    </div>
                                </div>
                                if (journalModel != null)
                                {
                                    <div class="col-12 mb-3">
                                        <div class="form-group">
                                            <label for="volume">Volume</label>
                                            <InputSelect class="form-select" id="volume" @bind-Value="@Model.VolumeId">
                                                @foreach (var item in journalModel.Volumes)
                                                {
                                                    <option value="@item.Id">@item.Number (@item.Year)</option>
                                                }
                                            </InputSelect>
                                        </div>
                                    </div>
                                }
                            }
                            <div col-12 mb-3>
                                <div class="form-group">
                                    <label for="authors">Author(s)</label>
                                    <AutoComplete @bind-Value="@articleAuthor"
                                                  ElementId="authors"
                                                  DataProvider="AuthorsDataProvider"
                                                  TItem="Author"
                                                  StringComparison="StringComparison.OrdinalIgnoreCase"
                                                  OnChanged="OnAuthorPicked"
                                                  Placeholder="Type author name"
                                                  PropertyName="FullName" />
                                </div>
                                <div class="mt-3">
                                    <ol class="list-group list-group-numbered">
                                        @foreach (var item in articleAuthors)
                                        {
                                            <li class="list-group-item list-group-item-info d-flex justify-content-between align-items-start">
                                                <div class="ms-2 me-auto">
                                                    @(item.Title).   @item.FirstName @item.LastName
                                                </div>
                                                <Icon Color="IconColor.Danger" @onclick="()=>articleAuthors.Remove(item)" title="remove this author" Name="IconName.Trash" />
                                            </li>
                                        }
                                    </ol>
                                </div>
                            </div>
                        </div>
                    </div>
                </CardBody>
            </Card>
            <Card class="col-xs-12 col-md-6">
                <CardHeader>
                    <Button Color="ButtonColor.Success" Type="ButtonType.Submit">Submit</Button>
                </CardHeader>
                <CardBody class="row">
                    <div @ref="@dragElement" class="col-12 drag-drop">
                        <InputFile style="position: absolute; width: 100%;height: 100%;opacity: 0;cursor: pointer;" @ondragenter="OnDragEnter" @ondragleave="OnDragLeave" @ref="@documentUpload" OnChange="OnFileUpload" id="documentUpload" accept=".pdf"></InputFile>
                        Drag and drop files here or click to upload.                       
                    </div>
                    
                    @if (documentFile !=null)
                    {
                        <div id="documentPreview" class="col-12">
                            <embed id="dViewer" src="@(fileSystemHelper.ReadAsBlob(documentFile))" type="application/pdf" width="100%" height="90%" />
                        </div>
                    }
                </CardBody>
            </Card>
        </div>
    </EditForm>
</div>
<Modal @ref="volumesModal" Title="Configure Journal Volumes">
    <BodyTemplate>
        <EditForm id="vConfigForm" OnValidSubmit="AddJournal" Model="@volumeGenerationConfiguration">
            <DataAnnotationsValidator />
            <div class="row">
                <div class="col-12 col-md-6 mb-3">
                    <div class="form-group">
                        <label for="volumeMode">Volume Generation Mode</label>
                        <InputSelect id="volumeMode" @bind-Value="@volumeGenerationConfiguration.Mode" class="form-select">
                            @foreach (VolumeGenerationMode item in Enum.GetValues(typeof(VolumeGenerationMode)))
                            {
                                <option value="@item">@item.ToString()</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="()=>volumeGenerationConfiguration.Mode" />
                    </div>
                </div>
                <div class="col-12 col-md-6 mb-3">
                    <div class="form-group">
                        <label for="volumeFrequency">Frequency</label>
                        <InputSelect id="volumeFrequency" @bind-Value="@volumeGenerationConfiguration.Frequency" class="form-select">
                            @foreach (VolumeGenerationFrequency item in Enum.GetValues(typeof(VolumeGenerationFrequency)))
                            {
                                <option value="@item">@item.GetDescription()</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="()=>volumeGenerationConfiguration.Frequency" />
                    </div>
                </div>
                <div class="col-12 col-md-6 mb-3">
                    <div class="form-group">
                        <label for="startYear">Start Year</label>
                        <InputNumber id="startYear" @bind-Value="@volumeGenerationConfiguration.StartYear" class="form-control"></InputNumber>
                        <ValidationMessage For="()=>volumeGenerationConfiguration.StartYear" />
                    </div>
                </div>
                <div class="col-12 col-md-6 mb-3">
                    <div class="form-group">
                        <label for="endYear">End Year (0 for endless)</label>
                        <InputNumber id="endYear" @bind-Value="@volumeGenerationConfiguration.EndYear" class="form-control"></InputNumber>
                        <ValidationMessage For="()=>volumeGenerationConfiguration.EndYear" />
                    </div>
                </div>
                <div class="col-12 col-md-6 mb-3">
                    <div class="form-group">
                        <Switch @bind-Value="@volumeGenerationConfiguration.GenerateNow" Label="Generate volumes immediately" />
                    </div>
                </div>
            </div>
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="async ()=>await volumesModal.HideAsync()">Close</Button>
        <Button form="vConfigForm" LoadingText="Saving.." Loading="@processing" Type="ButtonType.Submit" Color="ButtonColor.Primary">Save changes</Button>
    </FooterTemplate>
</Modal>
@code {
    Article Model = new Article { Publisher = new Publisher() };
    Author? currentAuthor;
    [CascadingParameter]
    Task<AuthenticationState> AuthenticationStateTask { get; set; }
    ClaimsPrincipal? claimsPrincipal { get; set; }
    List<Author> authors = new List<Author>();
    List<Author> articleAuthors = new List<Author>();
    string articleAuthor;
    ElementReference dragElement;
    InputFile documentUpload;
    FileModel? documentFile;
    private async Task<AutoCompleteDataProviderResult<Author>> AuthorsDataProvider(AutoCompleteDataProviderRequest<Author> request)
    {

        authors = await authorService.Table.ToListAsync(); // call a service or an API to pull the authors
        return await Task.FromResult(new AutoCompleteDataProviderResult<Author> { Data = authors, TotalCount=authors.Count });
    }
    protected override async Task OnInitializedAsync()
    {
        claimsPrincipal = (await AuthenticationStateTask).User;
        if (claimsPrincipal !=null && claimsPrincipal.Identity.IsAuthenticated)
        {
            var currentAuthor = await authorService.Table.FirstOrDefaultAsync(a => a.UserId == claimsPrincipal.GetUserId());
            if (currentAuthor is not null)
            {
                articleAuthors.Add(currentAuthor);
            }
            else
            {
                Navigation.NavigateTo("/profile", true);
            }

        }
        else
        {
            Navigation.NavigateTo("login?next=submit", true);
        }

    }

    void OnAuthorPicked(Author author)
    {
        if (author is not null)
        {
            if (articleAuthors.Any(a => a.Id==author.Id))
            {
                toastService.Notify(new ToastMessage
                    {
                        Message = "This author has already been added",
                        IconName = IconName.Exclamation,
                        Type = ToastType.Warning
                    });
                articleAuthor = string.Empty;
                return;
            }
            articleAuthors.Add(author);
            articleAuthor = string.Empty;
            StateHasChanged();
        }
    }
    void SubmitPaperAsync()
    {
        if (articleAuthors.Count == 0)
        {
            toastService.Notify(new ToastMessage
                {
                    Message = "Add at least one author",
                    IconName = IconName.Exclamation,
                    Type = ToastType.Danger
                });
            return;
        }
    }
    async Task OnDragEnter(DragEventArgs args)
    {
        await javaScriptRuntime.InvokeVoidAsync("focusDrag", dragElement, true);
    }
    async Task OnDragLeave(DragEventArgs args)
    {
        await javaScriptRuntime.InvokeVoidAsync("focusDrag", dragElement, false);
    }
    async Task OnDragClick()
    {
        await javaScriptRuntime.InvokeVoidAsync("triggerInput", documentUpload.Element);
    }
    async Task OnDragDrop(DragEventArgs args)
    {
       await javaScriptRuntime.InvokeVoidAsync("onDragAreaDrop", args, documentUpload.Element);
    }

    async Task OnFileUpload(InputFileChangeEventArgs args)
    {
        try
        {
            var file = args.File;
            if (file.Size > 10000000)
            {
                toastService.Notify(new ToastMessage(ToastType.Danger, "File size can not be more than 10mb."));
                return;
            }
            var fileStream = file.OpenReadStream(10000000);
            var memoryStream = new MemoryStream();
            await fileStream.CopyToAsync(memoryStream);
            documentFile = fileSystemHelper.Upload(memoryStream, file.ContentType, Core.Shared.FileStore.documents);
            StateHasChanged();
        }
        catch (Exception)
        {
            toastService.Notify(new ToastMessage(ToastType.Danger, "File upload failed. Try again."));
        }

    }
   
}
@code {
    bool createNewPublisher, createNewJournal;
    IEnumerable<Publisher> publishers = new List<Publisher>();
    IEnumerable<Journal> journals = new List<Journal>();
    Guid creatingGuid = Guid.NewGuid();
    string PublisherName { get; set; }
    string JournalName { get; set; }
    string JournalDescription { get; set; }
    Journal? journalModel;
    Guid journalGuid { get => journalModel == null ? creatingGuid : journalModel.Id; }
    Modal volumesModal;
    VolumeGenerationConfiguration volumeGenerationConfiguration = new();
    void OnPublisherChanged(Guid publisherId)
    {

        if (publisherId == creatingGuid)
        {
            createNewPublisher = true;
        }
        else
        {
            createNewPublisher = false;
            var publisher = publishers.FirstOrDefault(p => p.Id == publisherId);
            if (publisher != null)
            {
                Model.PublisherId = publisher.Id;
            }
        }
    }
    void OnJournalChanged(Guid journalId)
    {

        if (journalId == creatingGuid)
        {
            createNewJournal = true;
        }
        else
        {
            createNewJournal = false;
            journalModel = journals.FirstOrDefault(p => p.Id == journalId);
            StateHasChanged();

        }
    }
    protected override void OnInitialized()
    {
        publishers = publisherService.Table.ToList();
        journals = journalService.Table.Include(j => j.Volumes).ToList();
    }
    bool processing;
    async void AddJournal()
    {
        if (string.IsNullOrWhiteSpace(JournalName) || string.IsNullOrWhiteSpace(JournalDescription))
        {
            return;
        }
        if (!journals.Any(j => j.Name.Equals(JournalName, StringComparison.OrdinalIgnoreCase)))
        {
            processing = true;
            var journal = new Journal { Name = JournalName, Description = JournalDescription, VolumeGenerationConfiguration = volumeGenerationConfiguration };
            journalService.Save(journal);
            if (volumeGenerationConfiguration.GenerateNow)
            {
                await volumeGenerationConfigurationService.ExecuteAutomaticVolumeGenerationJob();
            }
            journals = journalService.Table.Include(j => j.Volumes).ToList();
            journalModel = journals.FirstOrDefault(j => j.Name.Equals(JournalName, StringComparison.OrdinalIgnoreCase));
            JournalName = string.Empty;
            JournalDescription = string.Empty;
            processing = false;
            await volumesModal.HideAsync();
            StateHasChanged();
        }
    }
    async void AddJournalVolumes()
    {
        if (string.IsNullOrWhiteSpace(JournalName) || string.IsNullOrWhiteSpace(JournalDescription))
        {
            toastService.Notify(new ToastMessage
                {
                    Message = "Journal name and description fields are required.",
                    Type = ToastType.Danger
                });
            return;
        }
        else
        {
            volumeGenerationConfiguration = new();
            await volumesModal.ShowAsync();
        }
    }
    void AddPublisher()
    {
        if (string.IsNullOrWhiteSpace(PublisherName))
        {
            return;
        }
        if (!publishers.Any(p => p.Name.Equals(PublisherName, StringComparison.OrdinalIgnoreCase)))
        {
            var publisher = new Publisher { Name = PublisherName };
            publisherService.Save(publisher);
            publishers = publisherService.Table.ToList();
            Model.PublisherId = publishers.FirstOrDefault(p => p.Name.Equals(PublisherName, StringComparison.OrdinalIgnoreCase)).Id;
            PublisherName = string.Empty;
            StateHasChanged();
        }

    }
}
