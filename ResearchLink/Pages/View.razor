@page "/research"
<div class="container mt-5">
    @if (Model != null)
    {
        <Card>
            <CardHeader>
                <CardTitle>@Model.Title</CardTitle>
            </CardHeader>
            <CardBody>
                <div class="row">
                    <div class="col-xs-12 col-md-6">
                        <h6>Abstract</h6><hr />
                        <p class="text-justify pa-2">@Model.Description</p>
                    </div>
                    <div class="col-xs-12 col-md-6">
                        <div class="row">
                            <div class="col-6 col-xs-12">
                                Published : <span class="text-info">@Model.DatePublished.Humanize(false)</span>
                            </div>
                            <div class="col-6 col-xs-12">
                                Publisher : <span class="text-info">@Model.Publisher.Name</span>
                            </div>
                        </div>
                        <hr />
                        <div class="row mt-4 p-4">
                            <table class="table table-striped table-bordered table-sm">
                                <colgroup>
                                    <col width="40%" />
                                    <col width="60%" />
                                </colgroup>
                                <tr>
                                    <td class="text-bold">Type</td>
                                    <td>@Model.Type.GetDescription()</td>
                                </tr>
                                @if (Model.Type==ResearchType.JournalArticle)
                                {
                                    <tr>
                                        <td class="text-bold">Published In:</td>
                                        <td>@Model?.Volume?.Journal?.Name</td>
                                    </tr>
                                    <tr>
                                        <td class="text-bold">Volume:</td>
                                        <td>@Model?.Volume?.Number</td>
                                    </tr>
                                    <tr>
                                        <td class="text-bold">Pages:</td>
                                        <td>@Model?.Pages</td>
                                    </tr>
                                }
                                <tr>
                                    <td class="text-bold">Year:</td>
                                    <td>@Model?.Year</td>
                                </tr>

                            </table>
                        </div>
                        <div class="row p-4">
                            <h6>Authors</h6>
                            <ul style="max-height:250px" class="list-group overflow-auto">
                                @if (Model.Authors.Any())
                                {
                                    foreach (var item in Model.Authors)
                                    {
                                        <li class="list-group-item d-flex justify-content-between align-items-center">
                                            <div class="me-3">
                                                <img width="48" height="48" style="object-fit:contain !important;border-radius:50%" src="@(fileSystemHelper.ReadAsBlob(item?.Author?.Avatar))" alt="User Profile" class="img-fluid">

                                                <a href="profile?uid=@(item.Author.UserId)" class="link-normal">@item.Author.FullName</a>
                                            </div>

                                            <span class="badge badge-primary badge-pill">1</span>
                                        </li>
                                    }
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            </CardBody>
            <CardFooter>
                @if (isMyResearch)
                {
                    <a href="edit?p=@(Model.Id)" class="btn btn-success mx-4"><i class="fas fa-edit"></i> Edit</a>
                }
                <button @onclick="DownloadPaper" class="btn btn-danger"><i class="fas fa-file-pdf"></i> Download PDF</button>
                <button @onclick="async ()=> await viewDocModal.ShowAsync()" class="btn btn-info"><i class="fas fa-file"></i> View</button>
            </CardFooter>
        </Card>
        <Modal @ref=@viewDocModal Size="ModalSize.Large" ShowCloseButton IsVerticallyCentered>
         <BodyTemplate>
             <embed width="100%" type="application/pdf" src="@fileSystemHelper.ReadAsBlob(Model.Document)" style="height:70vh" />
         </BodyTemplate>
         <FooterTemplate>
             <Button @onclick=" async ()=> await viewDocModal.HideAsync()" Color="ButtonColor.Secondary">Close</Button>
         </FooterTemplate>
     </Modal>
    }
    else
    {
        <div class="d-flex align-items-center justify-content-center">
            <Alert Color="AlertColor.Danger"> <Icon Name="IconName.InfoCircleFill" class="me-2"></Icon> Something went wrong <a href="/">home</a></Alert>
        </div>
    }
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "p")]
    public Guid Id { get; set; }
    Article? Model { get; set; }
    Modal viewDocModal;
    bool isMyResearch;
    [CascadingParameter]
    Task<AuthenticationState> AuthenticationStateTask { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Model = await articleService.Table
                                    .Include(a => a.Volume)
                                    .ThenInclude(v => v.Journal)
                                    .FirstOrDefaultAsync(x => x.Id==Id);
        var currentUser = (await AuthenticationStateTask).User;
        if (Model != null && currentUser?.Identity != null && currentUser.Identity.IsAuthenticated)
        {
            isMyResearch = Model.Authors.Any(a => a.Author.UserId == currentUser.GetUserId());
        }
        StateHasChanged();
    }
    async Task DownloadPaper()
    {
        await javaScriptRuntime.InvokeVoidAsync("downloadFile", new { blob= fileSystemHelper.ReadAsBlob(Model.Document) ,fileName = $"link_{Model.Title.Replace(" ", "_").Substring(0, 10)}.pdf" });
    }
}
