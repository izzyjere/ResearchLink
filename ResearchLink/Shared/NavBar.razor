
<nav class="navbar navbar-expand-lg bg-body-tertiary px-5 fixed-top">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">ResearchLink</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <NavLink class="nav-link" aria-current="page" ActiveClass="active" href="/">Home</NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="people">People</NavLink>
                </li>
                <li class="nav-item">
                    <AuthorizeView>
                        <Authorized>
                            <NavLink class="nav-link" href='@($"research/gap?researcher={context.User.GetUserId()}")'>Research Gaps</NavLink>
                        </Authorized>
                        <NotAuthorized>
                            <NavLink class="nav-link" href="research/gap">Research Gaps</NavLink>
                        </NotAuthorized>
                    </AuthorizeView>

                </li>
                <AuthorizeView>
                    <Authorized>
                        <li class="nav-item dropdown">
                            <NavLink class="nav-link dropdown-toggle" href="publications" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                Submissions
                            </NavLink>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" href="/">View All</a></li>
                                <li><a Class="dropdown-item" Href="submit/gap">Submit a research gap</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><AuthorisedLink Class="dropdown-item" Href="submit">Submit a paper</AuthorisedLink></li>
                            </ul>
                        </li>
                    </Authorized>
                </AuthorizeView>
                <AuthorizeView Roles="@RoleConstants.Researcher">
                    <Authorized>
                        <li class="nav-item">
                            <NavLink class="nav-link" href="payments">Payments</NavLink>
                        </li>
                    </Authorized>
                </AuthorizeView>
            </ul>
            <div class="d-flex align-items-center dropdown">
                <AuthorizeView>
                    <Authorized>
                        <div class="user-profile me-3 dropdown-toggle" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            <img width="20" height="20" style="object-fit:cover !important" src="@avatarBlob" alt="User Profile" class="img-fluid">
                            <span class="navbar-text">@context.User.GetFullName()</span>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" @onclick='()=>Navigation.NavigateTo("profile",true)' href="">Profile</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" @onclick='()=>Navigation.NavigateTo("logout",true)' href="">Logout</a></li>
                            </ul>
                        </div>
                    </Authorized>
                    <NotAuthorized>
                        <div class="me-3">
                            <a href="login" class="btn btn-primary"><i class="fas fa-lock-open mr-3"></i> Login</a>
                        </div>
                    </NotAuthorized>
                </AuthorizeView>
            </div>
        </div>
    </div>
</nav>


@code {
    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }
    ClaimsPrincipal? claimsPrincipal { get; set; }
    string? avatarBlob;
    protected override async Task OnInitializedAsync()
    {
        claimsPrincipal = (await authenticationStateTask).User;
        if (claimsPrincipal != null && claimsPrincipal.Identity.IsAuthenticated)
        {
            var avatar = authorService.Table
                                             .FirstOrDefault(x => x.UserId==claimsPrincipal.GetUserId());
            if (avatar != null)
            {
                if (avatar.HasAvatar)
                {
                    avatarBlob = fileSystemHelper.ReadAsBlob(avatar.Avatar);
                }
                else
                {
                    avatarBlob = $"generateAvatar/{avatar.Initials}/40/40/5";
                }
            }
        }
    }
}
